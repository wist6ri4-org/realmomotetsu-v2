"use client";

import { useState, useEffect } from "react";
import { useRouter, useParams } from "next/navigation";
import {
    Container,
    Paper,
    Typography,
    Button,
    Box,
    Avatar,
    Alert,
    CircularProgress,
} from "@mui/material";
import { PhotoCamera, Save, Cancel } from "@mui/icons-material";
import { UserUtils } from "@/utils/userUtils";
import { useAuthGuard } from "@/hooks/useAuthGuard";
import supabase from "@/lib/supabase";

export default function UserIconEditPage() {
    const router = useRouter();
    const params = useParams();
    const eventCode = params.eventCode as string;

    const { user, isLoading: authLoading } = useAuthGuard();
    const [currentIconUrl, setCurrentIconUrl] = useState<string>("");
    const [selectedFile, setSelectedFile] = useState<File | null>(null);
    const [previewUrl, setPreviewUrl] = useState<string>("");
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string>("");
    const [success, setSuccess] = useState<string>("");

    useEffect(() => {
        const loadCurrentIcon = async () => {
            if (user && user.uuid) {
                try {
                    const userUtils = new UserUtils();
                    const iconUrl = await userUtils.getUserIconUrlWithExtension(user.uuid);
                    if (iconUrl) {
                        setCurrentIconUrl(iconUrl);
                    }
                } catch (error) {
                    console.log("ÁèæÂú®„ÅÆ„Ç¢„Ç§„Ç≥„É≥„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:", error);
                    // „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÅØ„Éá„Éï„Ç©„É´„Éà„Ç¢„Ç§„Ç≥„É≥„Çí‰ΩøÁî®
                }
            }
        };

        loadCurrentIcon();
    }, [user]);

    // „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Ç¢„É≥„Éû„Ç¶„É≥„ÉàÊôÇ„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    useEffect(() => {
        return () => {
            if (previewUrl) {
                URL.revokeObjectURL(previewUrl);
            }
        };
    }, [previewUrl]);

    const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (file) {
            // „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÉÅ„Çß„ÉÉ„ÇØÔºà5MBÂà∂ÈôêÔºâ
            if (file.size > 5 * 1024 * 1024) {
                setError("„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„Åå5MB„ÇíË∂Ö„Åà„Å¶„ÅÑ„Åæ„Åô„ÄÇ");
                return;
            }

            // „Éï„Ç°„Ç§„É´ÂΩ¢Âºè„ÉÅ„Çß„ÉÉ„ÇØ
            if (!file.type.startsWith("image/")) {
                setError("ÁîªÂÉè„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
                return;
            }

            setSelectedFile(file);
            setError("");

            // „Éó„É¨„Éì„É•„ÉºÁî®„ÅÆURL„Çí‰ΩúÊàê
            const objectUrl = URL.createObjectURL(file);
            setPreviewUrl(objectUrl);
        }
    };

    const handleSave = async () => {
        if (!selectedFile || !user || !user.uuid) {
            return;
        }

        setLoading(true);
        setError("");
        setSuccess("");

        try {
            const userUtils = new UserUtils();
            // „Ç¢„Ç§„Ç≥„É≥„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
            const iconUrl = await userUtils.uploadUserIcon(selectedFile, user.uuid);

            if (iconUrl) {
                // ÁèæÂú®„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥„Åã„Çâ„Ç¢„ÇØ„Çª„Çπ„Éà„Éº„ÇØ„É≥„ÇíÂèñÂæó
                const {
                    data: { session },
                } = await supabase.auth.getSession();
                if (!session?.access_token) {
                    throw new Error("Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ„É≠„Ç∞„Ç§„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
                }

                // „Éá„Éº„Çø„Éô„Éº„Çπ„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÊõ¥Êñ∞Ôºà„Ç¢„Ç§„Ç≥„É≥URL„ÇíÊõ¥Êñ∞Ôºâ
                const response = await fetch(`/api/users/${user.uuid}`, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json",
                        Authorization: `Bearer ${session.access_token}`,
                    },
                    body: JSON.stringify({
                        iconUrl: iconUrl,
                    }),
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(
                        `„Ç¢„Ç§„Ç≥„É≥URL„ÅÆÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message || "Unknown error"}`
                    );
                }

                setSuccess("„Ç¢„Ç§„Ç≥„É≥„ÅåÊõ¥Êñ∞„Åï„Çå„Åæ„Åó„Åü„ÄÇ");

                // ÁèæÂú®„ÅÆ„Ç¢„Ç§„Ç≥„É≥URL„ÇíÊñ∞„Åó„ÅÑ„Ç¢„Ç§„Ç≥„É≥URL„ÅßÊõ¥Êñ∞
                setCurrentIconUrl(iconUrl);
                setSelectedFile(null);
                setPreviewUrl("");

                // „Éó„É¨„Éì„É•„ÉºURL„ÅÆ„É°„É¢„É™„É™„Éº„ÇØ„ÇíÈò≤„Åê
                if (previewUrl) {
                    URL.revokeObjectURL(previewUrl);
                }
            }
        } catch (err) {
            console.error("Icon update error:", err);
            setError(err instanceof Error ? err.message : "„Ç¢„Ç§„Ç≥„É≥„ÅÆÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ");
        } finally {
            setLoading(false);
        }
    };

    const handleCancel = () => {
        // „Éó„É¨„Éì„É•„ÉºURL„ÅÆ„É°„É¢„É™„É™„Éº„ÇØ„ÇíÈò≤„Åê
        if (previewUrl) {
            URL.revokeObjectURL(previewUrl);
        }

        setSelectedFile(null);
        setPreviewUrl("");
        setError("");
    };

    const handleBack = () => {
        router.push(`/events/${eventCode}/operation/user-settings`);
    };

    if (authLoading) {
        return (
            <Container maxWidth="sm" sx={{ display: "flex", justifyContent: "center", mt: 4 }}>
                <CircularProgress />
            </Container>
        );
    }

    return (
        <Container maxWidth="sm" sx={{ mt: 4, mb: 4 }}>
            <Paper elevation={3} sx={{ p: 4 }}>
                <Typography variant="h4" component="h1" gutterBottom>
                    „Ç¢„Ç§„Ç≥„É≥Ë®≠ÂÆö
                </Typography>

                {error && (
                    <Alert severity="error" sx={{ mb: 2 }}>
                        {error}
                    </Alert>
                )}

                {success && (
                    <Alert severity="success" sx={{ mb: 2 }}>
                        {success}
                    </Alert>
                )}

                <Box
                    sx={{ display: "flex", flexDirection: "column", alignItems: "center", gap: 3 }}
                >
                    {/* ÁèæÂú®„ÅÆ„Ç¢„Ç§„Ç≥„É≥ */}
                    <Box sx={{ textAlign: "center" }}>
                        <Typography variant="h6" gutterBottom>
                            ÁèæÂú®„ÅÆ„Ç¢„Ç§„Ç≥„É≥
                        </Typography>
                        <Avatar
                            src={currentIconUrl || undefined}
                            sx={{
                                width: 120,
                                height: 120,
                                mx: "auto",
                                bgcolor: currentIconUrl ? "transparent" : "primary.main",
                                fontSize: "3rem",
                            }}
                        >
                            {!currentIconUrl && "üë§"}
                        </Avatar>
                    </Box>

                    {/* „Éó„É¨„Éì„É•„Éº */}
                    {previewUrl && (
                        <Box sx={{ textAlign: "center" }}>
                            <Typography variant="h6" gutterBottom>
                                Êñ∞„Åó„ÅÑ„Ç¢„Ç§„Ç≥„É≥Ôºà„Éó„É¨„Éì„É•„ÉºÔºâ
                            </Typography>
                            <Avatar src={previewUrl} sx={{ width: 120, height: 120, mx: "auto" }} />
                        </Box>
                    )}

                    {/* „Éï„Ç°„Ç§„É´ÈÅ∏Êäû */}
                    <Box sx={{ textAlign: "center" }}>
                        <input
                            type="file"
                            accept="image/*"
                            onChange={handleFileSelect}
                            style={{ display: "none" }}
                            id="icon-upload"
                        />
                        <label htmlFor="icon-upload">
                            <Button
                                variant="outlined"
                                component="span"
                                startIcon={<PhotoCamera />}
                                disabled={loading}
                            >
                                ÁîªÂÉè„ÇíÈÅ∏Êäû
                            </Button>
                        </label>
                        <Typography variant="caption" display="block" sx={{ mt: 1 }}>
                            JPG„ÄÅPNGÂΩ¢Âºè„Åß5MB‰ª•‰∏ã„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ
                        </Typography>
                    </Box>

                    {/* „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
                    <Box sx={{ display: "flex", gap: 2, justifyContent: "center", width: "100%" }}>
                        {selectedFile && (
                            <>
                                <Button
                                    variant="contained"
                                    onClick={handleSave}
                                    disabled={loading}
                                    startIcon={loading ? <CircularProgress size={20} /> : <Save />}
                                    sx={{ flex: 1 }}
                                >
                                    {loading ? "‰øùÂ≠ò‰∏≠..." : "‰øùÂ≠ò"}
                                </Button>
                                <Button
                                    variant="outlined"
                                    onClick={handleCancel}
                                    disabled={loading}
                                    startIcon={<Cancel />}
                                    sx={{ flex: 1 }}
                                >
                                    „Ç≠„É£„É≥„Çª„É´
                                </Button>
                            </>
                        )}
                    </Box>

                    <Button variant="text" onClick={handleBack} disabled={loading} sx={{ mt: 2 }}>
                        Ë®≠ÂÆöÁîªÈù¢„Å´Êàª„Çã
                    </Button>
                </Box>
            </Paper>
        </Container>
    );
}
